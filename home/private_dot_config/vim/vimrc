"           |  \
"  __     __ \▓▓______ ____   ______   _______
" |  \   /  \  \      \    \ /      \ /       \
"  \▓▓\ /  ▓▓ ▓▓ ▓▓▓▓▓▓\▓▓▓▓\  ▓▓▓▓▓▓\  ▓▓▓▓▓▓▓
"   \▓▓\  ▓▓| ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓   \▓▓ ▓▓
"    \▓▓ ▓▓ | ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓     | ▓▓_____
"     \▓▓▓  | ▓▓ ▓▓ | ▓▓ | ▓▓ ▓▓      \▓▓     \
"      \▓    \▓▓\▓▓  \▓▓  \▓▓\▓▓       \▓▓▓▓▓▓▓


" Useless because a vimrc file was found but still, an explicit setting.
set nocompatible

" Always use the XDG Base Directory specification {{{

" Note: this has been implemented in version 9.1.327:
" This needs to precede any configuration since it manipulates the runtimepath.

" Refuse to run if there are some missing environment variables set
" (for plugin manager auto install essentially)
if !exists('$XDG_CONFIG_HOME') ||
	\ !exists('$XDG_DATA_HOME') ||
	\ !exists('$XDG_CACHE_HOME')
	echoerr "One or all XDG_ environment variables are not defined!"
		\ "Vim will exit..."
	exit!
endif

" This is copied from: https://wiki.archlinux.org/title/XDG_Base_Directory

" :h set-args (^=)
set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p')

call mkdir($XDG_STATE_HOME."/vim", 'p')
if !has('nvim') | set viminfofile=$XDG_STATE_HOME/vim/viminfo | endif
" }}}

let mapleader = "\\"

" Enables automatic filetype detection, loads related system/user plugins and
" indentation settings based on the filetype.
" See :scriptnames for load order.
filetype plugin indent on
" Logically, syntax can only be achieved on detected filetypes, so after.
syntax on

" Terminal specifics {{{

" Parent process
" fix 'Thanks for flying Vim':
set notitle
set titleold=

" Note:
" It seems before some settings were needed to unmap <C-Left/Right...> to avoid
" some weird sequences to pop out in the buffer.
" Now I could not reproduce anything. ex: nmap <ESC>[1;5D <C-Left>

" if &term =~ "^st"
" endif
if &term =~ "^xterm-kitty"
	inoremap <ESC>[3;133~ <C-o>dW
endif

" So far it seems to work across many terminals
" kitty does it differentely
" <C-Delete>
inoremap <ESC>[3;5~ <C-o>dW
" }}}
" Vim specifics {{{

" Defaults:
" unmap increase/decrease numbers to avoid mistakes, prefer :h v_g_CTRL-a
" also reserve C-x for cut, see further
map <C-a> <Nop>
map <C-x> <Nop>
" consistent mapping from other vim basic motions
nnoremap Y y$
" ignore a text to replace from being recorded into registers
nnoremap c "_c
" fancy ways to quit insert mode
inoremap jk <Esc>
inoremap <expr> <C-c> "<Esc>"

" Vimrc:
" quick edit vimrc in a new tab
nnoremap <silent> <leader>V :tabnew $MYVIMRC<CR>zozz
" check for any mistake in this file as soon as it is written
augroup sourceVimrcOnSave
	autocmd!
	autocmd BufWritePost * nested if expand($MYVIMRC) ==# expand('%:p')
				\ | let v:errmsg = ""
				\ | silent source $MYVIMRC
				\ | doautocmd filetype vim
				\ | if empty(v:errmsg)
				\ |   redrawstatus!
				\ |   echo "virmc file reloaded without errors"
				\ | endif
				\ | endif
augroup END

" Session:
augroup onVimEnterRestoreSessionIfAny
	autocmd!
	function! RestoreSess()
		" [Gvim specific]
		" do not restore the session if v:servername contains numbers.
		" if so, it means an existing vim instance is running, but the
		" goal is to have a fresh one started, not a mirrored instance
		if filereadable(expand("~/Session.vim")) && v:servername !~ '\d'
			source ~/Session.vim
		endif
	endfunction
	" :h automcmd-nested
	autocmd VimEnter * nested call RestoreSess()
augroup END

" Viminfo:
" Tell vim to remember certain things when we exit
" :h viminfo-!
"  '10   :  marks will be remembered for up to 10 previously edited files
"  "1000 :  will save up to 1000 lines for each register
"  :20   :  up to 20 lines of command-line history will be remembered
"  %     :  saves and restores the buffer list | off - (use sessions if needed)
"  h     :  disable the effect of 'hlsearch'
"  n...  :  where to save the viminfo files | viminfofile set in xdg.vim
set viminfo='10,\"1000,:20,h

" F12:
" Discover the syntax group name for the word under the cursor.
" Really helpful to write a colorscheme.
" Wrapper of the vim native synstack function.
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
nnoremap <F12> :call g:SynStack()<CR>
" }}}
" User Interface (View) {{{

" Appearance:
set number		" show the line numbers on the left side...
set relativenumber	" ...with the numbers relative to the current line
set colorcolumn=80	" show a limit with a vertical mark bar
set conceallevel=0	" never replace any symbol like lambda sign, whatever
set nowrap		" allow long lines to extend as far as they go

set lazyredraw		" faster execution of macros, mappings, etc...

set belloff=all		" no bell
set novisualbell	" disable sound
set vb t_vb=		" clearing the visual bell length deactivates flashing

" when :set wrap, access the visually down/up line
nnoremap j gj
nnoremap k gk

" Splits:
" sane default behavior
set splitbelow
set splitright

" create quick splits (TODO: replace with tmux ?)
nnoremap <silent> <leader>s :split<CR>
nnoremap <silent> <leader>v :vsplit<CR>

" navigation shortcuts
" (TODO: do not break vimwiki's Backspace functionnality)
nnoremap <C-h>		<C-w>h
nnoremap <C-j>		<C-w>j
nnoremap <C-k>		<C-w>k
nnoremap <C-l>		<C-w>l
" my workflow is now mature, is this ever used again ?
" how about tmux ?
"nnoremap <C-Up>		<C-w>k
"nnoremap <C-Left>	<C-w>h
"nnoremap <C-Down>	<C-w>j
"nnoremap <C-Right>	<C-w>l

" non destructive layout shortcut is handled in ./30-bd.vim
" window/tab destructive :bd
nnoremap <silent> <leader>D :bd<CR>
" shortcut of the shortcut <C-w>c
nnoremap <silent> <leader>c :close<CR>

" Zoom without <C-w><C-o> (create a new 'temporary' window) - awesome trick
nnoremap <silent> <leader>t :-tab split<CR>
nnoremap <silent> <leader>T :tabnew<CR>
" Then close with <leader>c

" Custom:
nnoremap <silent> <leader>b :ls<CR>
nnoremap <silent> <leader>B :ls!<CR>
nnoremap <silent> <leader>q :bprev<CR>
nnoremap <silent> <leader>p :bnext<CR>
nnoremap <leader>e :enew<CR>

" F1 : Help
nnoremap <F2> :set wrap!<CR>
nnoremap <F4> :set list!<CR>

" <plugin> mark indentation levels
let g:indentLine_char = '┊'
let g:indentLine_setColors = 1

" Statusline:
set showcmd		" show the command being typed. Ex: "a
set noruler		" deactivate the vim ruler (x:y) - handled in plugin
set noshowmode		" avoid native vim --INSERT-- message below lightline
set laststatus=2	" always show the status line (required by lightline)
" Lightline plugin is enhancing from those settings

" Color:
set termguicolors	" use truecolor (24bit-mode)

" was this a fix to enable color ?
"if &term =~ "^st"
"	" from :help xterm-true-color
"	let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"	let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"	" Fixes mouse scrolling in st. Update: it seems fixed
"	"set ttymouse=sgr
"endif

colorscheme my-eighties
" }}}
" Editor Settings {{{
" General:
set hidden		" allow background buffers
set swapfile		" warn/recover on same opened file multiple times
set mouse=a		" use mouse for all vim modes (normal/visual...)
set tags=tags		" default file name to look for tags
set noautochdir		" autochdir changes the global directory, not win/tab
set backspace=indent,eol,start	" erase back even in insert mode
set textwidth=0		" do break text with a newline after n typped chars
set nojoinspaces	" leave only one space when joining (gqg)
set showmatch		" briefly highlight the matching ( { [ if any

" Tabs:			(Historical reason to choose 8 as a default)
set tabstop=8		" number of spaces that a <Tab> in a file counts for
set shiftwidth=0	" number of spaces to use for each step of (auto)indent
set softtabstop=0	" do not mix space and tabs to make up a set spacing
set noexpandtab		" never replace tabs with space

" Indent:


" Folds:
set foldenable
set foldmethod=marker	" uses {{{,}}} for folding code sections by default
set foldmarker=[[[,]]]	" for everything but vim: overriden in ftplugin/vim.vim
set foldlevelstart=0	" close most folds when opening a file
set foldnestmax=2	" maximum number of folds inside folds
set foldopen-=block	" do not open ( { [ folds when 'h/j/k/l' on them
" set foldclose=all	" auto close fold when leaving the fold scope
" TODO: apply this to anything ? Or make a plugin
" C/C++ functions and so on
" custom fold expression function
function! MyShFoldExpr(lnum)
    " Get the current line
    let line = getline(a:lnum)
    " Check for block start
    if line =~ '^{\s*$'
        " echom "Start fold at line ".a:lnum
        return '>1'
    " Check for block end
    elseif line =~ '^\s*}$'
        " echom "End fold at line ".a:lnum
        return '<1'
    " Inside a fold
    else
        return '=1'
    endif
endfunction
augroup sh_folding
  autocmd!
  autocmd FileType sh setlocal foldmethod=expr
  autocmd FileType sh setlocal foldexpr=MyShFoldExpr(v:lnum)
augroup END

" Files:
set encoding=UTF-8
set autoread		" reload files changed outside vim
augroup onFocusAttemptToTriggerAutoread
	autocmd!
	" note: this is still not close to real-time
	autocmd FocusGained,BufEnter * :checktime
augroup END

set nomodeline		" disable <fileCommentChar> vim: fdm=marker
" set modelines=1		" limit lines to read

" Recursively create folders on :e /non/existing/path/yet.file
augroup Mkdir
  autocmd!
  autocmd BufWritePre * call mkdir(expand("<afile>:p:h"), "p")
augroup END

" Misc:
" TOFIX: is this working ? perform dot commands over visual blocks:
vnoremap . :normal .<CR>
nnoremap <leader>x :cd %:h<CR>

nnoremap <leader>o o<ESC>k
nnoremap <leader>O O<ESC>j
" }}}
" Copy / Cut / Paste {{{

" Copy_Cut:
" Partial line copy/cut support: check (/)
if executable('xsel')
	" Prefer using xsel, as it handles text better.
	" See below to know which corner case it is solving
	vnoremap <silent> <C-c>
		\ "zy <BAR> :call system('xsel -i -b', @z)<CR>
	vnoremap <silent> <C-x>
		\ "zy <BAR> :call system('xsel -i -b', @z)<BAR>:normal gvd<CR>
	nnoremap <silent> <C-a>
		\ :%y z <BAR> :call system('xsel -i -b', @z)<CR>
elseif executable('xclip')
	" This works except when vim is suspended (^Z):
	" A selection is made using vim's visual mode
	" The selection got 'copied' to the clipboard with ^C
	" Vim is suspended with ^Z
	" Try to paste the selection in say Firefox/Mousepad... Nothing happens
	" Resume Vim with `fg`
	" The selection finally pops out into the process it was made.
	" If there were 2 ^V, the selection got pasted twice, and so on...
	"
	" This drove me crazy to the point I gave up and use xsel or don't ^Z.
	" here are some resources:
	" https://github.com/astrand/xclip/issues/20
	" https://askubuntu.com/questions/705620/xclip-vs-xsel
	" https://wiki.archlinux.org/title/Tmux#On_Xorg
	vnoremap <silent> <C-c>
		\ "zy :call system('xclip -selection clipboard', @z)<CR>
	vnoremap <silent> <C-x>
		\ "zy :call system('xclip -selection clipboard', @z)<BAR>
		\ :normal gvd<CR>
elseif executable('wl-clip')
	" Wayland
elseif executable('clip.exe')
	" To test WSL
endif

" Paste:
" coderwall.com automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
" https://cirw.in/blog/bracketed-paste
" www.xfree86.org/4.7.0/ctlseqs.html#Bracketed Paste Mode

" Suppose the following text to paste with Ctrl+Shift+V: FooBar
" When being translated to the terminal emulator world this would become:
" ^[200~FooBar^[201~

" :set termcap
let &t_SI = "\<Esc>[?2004h"  " Start Insert mode
let &t_EI = "\<Esc>[?2004l"  " End Insert (or Replace) mode
" tmux does not set those variables:
if &term =~ "^screen"
	let &t_BE = "\<Esc>[?2004h"
	let &t_BD = "\<Esc>[?2004l"
	let &t_PS = "\e[200~"
	let &t_PE = "\e[201~"
endif

" Wraps the paste process, disabling :set_paste once the
" paste has reached its terminating sequence.
function! DoNotIndentWhilePasting()
  set pastetoggle=<Esc>[201~  " Will turn 'paste' off in this context
  set paste
  " Text does not get indented
  return ""
endfunction
inoremap <special> <expr> <Esc>[200~ DoNotIndentWhilePasting()

" Otherwise, if the text is too big, rely on some external tools to paste:
if executable('xsel')
	nnoremap <leader><C-v> :r !xsel -b<CR>
elseif executable('xclip')
	nnoremap <leader><C-v> :r !xclip -out -selection clipboard<CR>
endif

" }}}
" Search {{{
set hlsearch		" highlight searches by default
set incsearch		" find the next match as we type the search
set ignorecase		" ignore case when searching...
set smartcase		" ...unless we type an uppercase letter

" search for the currently selected text in the file
vnoremap / y/\V<C-R>=escape(@",'/\')<CR><CR>

" shortcut to start a replace from the current line
nnoremap S :.,$s//gc<Left><Left><Left>
" and vim-cool is used to remove highlighted searches automatically (no :nohl)

" okay, I am done searching
nnoremap <silent><CR> :nohl<CR>

" TODO: 1 of N matches while iterating the search results and combine:
" always start a search from the cursor position
" this will loose the 'incsearch' feature.
" not incremental :(
" nnoremap / :.,$/

" should be to replace a selection (is there simpler ?)
" function! GetVisualSelection()
"   " Why is this not a built-in Vim script function?!
"   let [line_start, column_start] = getpos("'<")[1:2]
"   let [line_end, column_end] = getpos("'>")[1:2]
"   let lines = getline(line_start, line_end)
"   if len(lines) == 0
"     return ''
"   endif
"   let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
"   let lines[0] = lines[0][column_start - 1:]
"   let arf = join(lines, "\n")
"   exe ':%s/'.arf."/gc<Left><Left><Left>"
" endfunction
" }}}
" Cursor {{{

" Nice cursor shapes depending on the current editing mode
let &t_SI = "\<Esc>[6 q" " steady bar cursor for editing mode
let &t_EI = "\<Esc>[2 q" " steady block cursor for normal mode
let &t_SR = "\<Esc>[4 q" " steady underline cursor for replace mode
"set timeout
"set timeoutlen=50
"set ttimeoutlen=1000

" Keep centered when...
" scrolling up/down
nnoremap <expr> <C-d>    line('.') == 1 ? 'M' : '<C-d>zz'
nnoremap <C-u>  <C-u>zz
" going to the next/prev location
nnoremap <C-i>  <C-i>zzzv
nnoremap <C-o>  <C-o>zzzv
" going to a tag (land in a centered window)
nnoremap <C-]> <C-]>zzzv
" searching
nnoremap n nzzzv
nnoremap N Nzzzv
" joining
nnoremap J mzJ`z
" scrolling horizontally
nnoremap zl zL
nnoremap zh zH
" TODO: Be sure that this centers screen when jumping to marks
nnoremap <expr> ' "'" . nr2char(getchar()) . "zz"
nnoremap <expr> ` "`" . nr2char(getchar()) . "zz"
" TODO: when searching

" Todo: a cursor plugin ? fix the <C-o> which does not remember cursor
" automatically restore the previous cursor position
" keywords: - vim.fandom.com
"           - restore_cursor_to_file_position_in_previous_editing_session
function! ResCur()
  if line("'\"") > 1 && line("'\"") <= line("$")
    if foldclosed(line("'\"")) < 0
      silent normal! g`"zz
    else
      silent normal! g`"zozz
    endif
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END
" }}}
" Command-line mode {{{

" arrow up/down in :cmdline
cnoremap <C-k> <Up>
cnoremap <C-j> <Down>

" Quick_access:
" swap colon with semicolon, game changer...
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" see :h complex-change
" do not override the default !{motion} {filter} behavior
nnoremap <leader>1 :!

" Completion_menu:
set wildmenu		" do not spam TAB in command line
set wildmode=list:longest,list:lastused,list:full
set wildignore=*.jpg,*.png,*.gif,*.pdf,*.pyc,*.flv,*.img
set wildchar=<Tab>	" explicit setting: default in vim, <C-e> in Vi
set wildcharm=<Tab>	" recognize tab as completer command in mappings

" Help:
" :help to open in a vertical split: ftplugin/help.vim

" not ex-a-ctly related to the vim's command-line mode but eh
" Terminal: The builtin :term inside of vim (will shift in favor of tmux)
" rebind escape to avoid <C-w><S-N>
" (or was it C-n like in the following mapping) ?
tnoremap <C-[> <c-\><c-n>
" impossible on MS-Windows -> :h scroll-mouse-wheel
tnoremap <ScrollWheelUp> <C-\><C-n><C-u>
tnoremap <ScrollWheelDown> <C-d>
" }}}

" Plugin config {{{
" Leave the plugin configuration aside:
" This allows to overview the actual list of plugins and would make a
" replacement easier, centralize plugin config with variables one can check.

" =============================================================================
" App
" =============================================================================

" Vimwiki:
let g:vimwiki_list = [{'path': '~/documents/vimwiki' }]

" let g:vimwiki_list = [{
" 	\ 'path': '~/documents/vimwiki',
" 	\ 'template_path': '~/documents/vimwiki/templates/',
" 	\ 'template_default': 'default',
" 	\ 'syntax': 'markdown',
" 	\ 'ext': '.md',
" 	\ 'path_html': '~/documents/wiki_extract',
" 	\ 'custom_wiki2html': 'vimwiki_markdown',
" 	\ 'template_ext': '.tpl'}]

" Todo: convert this into a filetype file.
" [terminal] this conflicts with the shortcut <C-W>H mapping
" not a big deal since I am often dealing with vimwiki in a separate tab
augroup onVimwikiBindShiftBackspace
	autocmd!
	autocmd FileType vimwiki nnoremap <silent><buffer> <C-H> :VimwikiGoBackLink<CR>
augroup END

" Please, let me use backspace to navigate through code or lines
nmap <leader><BS> <Plug>VimwikiGoBackLink



" =============================================================================
" Git
" =============================================================================

" Fugitive:
" ...

" Gitgutter:
" go to
nmap <leader>g[  <Plug>(GitGutterNextHunk)
nmap <leader>g]  <Plug>(GitGutterPreviousHunk)
" git add
nmap <leader>ga  <Plug>(GitGutterStageHunk)
xmap <leader>ga  <Plug>(GitGutterStageHunk)

nmap <leader>gd  <Plug>(GitGutterPreviewHunk)
nmap <leader>gr  <Plug>(GitGutterUndoHunk)


" =============================================================================
" Session
" =============================================================================

" Obsession:
" ...

" =============================================================================
" View
" =============================================================================

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" FZF:
nnoremap <leader>f :FZF<CR>
nnoremap <leader>G :FZF ~<CR>

" Lightline:
let g:lightline = {
\ 'colorscheme': 'darcula'
\ }
function! LightlineReload()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction
command! LightlineReload call LightlineReload()

" VimFern:
nnoremap <leader><TAB> :Fern . -drawer -reveal=% -toggle<CR>

function! s:init_fern() abort
"   " Use 'select' instead of 'edit' for default 'open' action
"   " nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
  nnoremap <buffer> <C-h> <C-w>h
  nnoremap <buffer> <C-l> <C-w>l
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END

" (Is in js folder)
" VimHtmlTemplateLiterals {{{
" let g:htl_all_templates=1
" }}}

" IDE: =======================================================================
" ALE {{{
" I only use ALE for its 'UI' just for forwarding the LSP results to my buffer
" There should be nothing to configure here, as everything is handled elsewhere
" }}}
" vim-lsp {{{

let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_semantic_enabled = 1
let g:lsp_semantic_delay = 0

if executable('bash-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'shell',
        \ 'cmd': {server_info->['bash-language-server', 'start']},
        \ 'allowlist': ['sh'],
        \ })
endif

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript',
        \ 'cmd': {server_info->['typescript-language-server', '--stdio']},
        \ 'allowlist': ['typescript', 'typescriptreact'],
        \ })
endif

if executable('vim-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'vim',
        \ 'cmd': {server_info->['vim-language-server', '--stdio']},
        \ 'allowlist': ['vim'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    " Avoid init delay (preparation for ALE)
    setlocal signcolumn=yes
    setlocal omnifunc=asyncomplete#
    " if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <leader>ld <plug>(lsp-definition)
    nmap <buffer> <leader>ls <plug>(lsp-document-symbol-search)
    nmap <buffer> <leader>lS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> <leader>lr <plug>(lsp-references)
    nmap <buffer> <leader>li <plug>(lsp-implementation)
    nmap <buffer> <leader>lt <plug>(lsp-type-definition)
    nmap <buffer> <leader>lR <plug>(lsp-rename)
    nmap <buffer> <leader>l[ <plug>(lsp-previous-diagnostic)
    nmap <buffer> <leader>l] <plug>(lsp-next-diagnostic)
    nmap <buffer> <leader>lK <plug>(lsp-hover)
endfunction

    " Eventually, if an autocmd is needed for working on the UX of ALE
    " https://github.com/prabirshrestha/vim-lsp/issues/1280

augroup lsp_install
    autocmd!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END


" }}}
" Asyncomplete {{{
" let g:asyncomplete_auto_popup = 1
" let g:asyncomplete_min_chars = 3

" don't mess with the vim native settings
let g:asyncomplete_auto_completeopt = 0
set completeopt=menuone,noinsert,preview

" navigate with either C-j or C-k
" PageUp and PageDown are handled already, cool
inoremap <expr> <C-j>  pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k>  pumvisible() ? "\<C-p>" : "\<C-k>"

" accept selected entry with either Tab or CR
inoremap <expr> <Tab>  pumvisible() ? asyncomplete#close_popup() : "\<Tab>"
inoremap <expr> <CR>   pumvisible() ? asyncomplete#close_popup() : "\<CR>"

" force completion to appear
imap <C-Space> <Plug>(asyncomplete_force_refresh)

augroup complete_files
	autocmd!
	autocmd User asyncomplete_setup call
	\ asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
		\ 'name': 'file',
		\ 'allowlist': ['*'],
		\ 'priority': 10,
		\ 'completor': function('asyncomplete#sources#file#completor')
		\ }))
augroup END
" }}}

" let g:everforest_background = 'medium'
" let g:everforest_transparent_background = 0
" colo everforest
" }}}
